#!/usr/bin/env node

/**
 * Module dependencies.
 */

const checklist = require('../util/checklist');

const debug = require('debug')('nemo-surf-shop:server');

debug(checklist.print('OK', 'NEMO Surf Shop Loading!'));

const app = require('../app');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.on('error', onError);
server.on('listening', onListening);
server.listen(port);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
    // named pipe
        return val;
    }

    if (port >= 0) {
    // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = (typeof port === 'string') ? ('Pipe ' + port) : ('Port ' + port);

    // handle specific listen errors with friendly messages
    switch (error.code) {
    case 'EACCES':
        console.error(checklist.print('FAIL', (bind + ' requires elevated privileges')));
        process.exit(1);
        break;
    case 'EADDRINUSE':
        process.exit(1);
        break;
    default:
        throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = (typeof addr === 'string') ? ('pipe ' + addr) : ('port ' + addr.port);
    debug(checklist.print('OK', ('NEMO surf shop is listening on ' + bind)));
}